#include<stdio.h>
#include<string.h>
#include<stdlib.h>

#define MAX 60
#define ABRIGOS 3
#define TAM 100

typedef struct{

    int cod;
    int tipo;
    int sexo;
    int idade;
    char tutor[TAM];
}pet;

void Ler(pet *estrutura_pointer)
{
    int op;
    printf("==Cadastrando pet==\n");

    printf("Digite o tipo do pet:\n[0]gato\n[1]Cachorro porte pequeno\n[2]Cachorro porte médio\n[3]Cachorro porte grande\n");
    scanf("%d", &estrutura_pointer->tipo);

    printf("Digite o sexo do pet:\n[0]Fêmea\n[1]Macho\n");
    scanf("%d", &estrutura_pointer->sexo);

    printf("Digite a idade do pet\n[0]Filhote\n[1]Adulto\n");
    scanf("%d", &estrutura_pointer->idade);

    printf("O pet tem tutor?\n[0]Não\n[1]Sim\n");
    scanf("%d", &op);

    if(op == 0){
        strcpy(estrutura_pointer->tutor, "Sem tutor");
    }
    else if(op == 1){
        printf("Digite o nome do tutor\n");
        scanf(" %[^\n]", estrutura_pointer->tutor);
    }
}

int Registrar(pet estrutura, pet *Dados[MAX][3], int registro_por_abrigo[ABRIGOS], int *absolute_cod)
{
    int abrigo, code, i, test = 0, j;

    printf("Em qual abrigo o pet será resgistado?: 0 , 1 ou 2\n");
    scanf("%d", &abrigo);
    
    if (abrigo < 0 || abrigo >= ABRIGOS) {
    printf("Abrigo inválido.\n");
    return 0;
    }
    
    int indice = registro_por_abrigo[abrigo];
    

    if(registro_por_abrigo[abrigo] >= MAX){
        printf("Abrigo %d lotado!\n", abrigo);
        return 0;
    }
    else if(registro_por_abrigo[abrigo] < MAX){


        code = *absolute_cod;
    
        printf("\nCadastrando pet de cod: %d...\n", code);
        
        
        Dados[registro_por_abrigo[abrigo]][abrigo] = malloc(sizeof(pet));
        
        
        Dados[registro_por_abrigo[abrigo]][abrigo]->cod = code;
        Dados[registro_por_abrigo[abrigo]][abrigo]->tipo = estrutura.tipo;
        Dados[registro_por_abrigo[abrigo]][abrigo]->sexo = estrutura.sexo;
        Dados[registro_por_abrigo[abrigo]][abrigo]->idade = estrutura.idade;
        strcpy(Dados[registro_por_abrigo[abrigo]][abrigo]->tutor, estrutura.tutor);

        (*absolute_cod)++;
        }
    
    printf("\nCadastro do pet de cod: %d completo!\n", Dados[registro_por_abrigo[abrigo]][abrigo]->cod);
    registro_por_abrigo[abrigo]++;
    return 0;
}

void Mostrar(pet *Dados[MAX][ABRIGOS],int registro_por_abrigo[ABRIGOS])
{
	int i, j;
	
    for(i = 0; i < ABRIGOS; i++){
     printf("\nAnimais no abrigo %d:\n", i);
      for(j = 0; j < registro_por_abrigo[i]; j++){
          if(Dados[j][i] == NULL){
              printf("Abrigo Vazio\n");
              continue;
          }

        printf(" \nPet de Código: %d\n", Dados[j][i]->cod);
        printf(" Tipo: %s\n", 
           (Dados[j][i]->tipo == 0) ? "Gato" :
           (Dados[j][i]->tipo == 1) ? "Cachorro pequeno" :
           (Dados[j][i]->tipo == 2) ? "Cachorro médio" :
                                      "Cachorro Grande");
        printf(" sexo: %s\n", 
           (Dados[j][i]->sexo == 0) ? "Fêmea" :
                                      "Macho");
        printf(" idade: %s\n", 
            (Dados[j][i]->idade == 0) ? "Filhote" :
                                        "Adulto");
        printf(" Tutor: %s\n", Dados[j][i]->tutor);
      }
    }
}
void Adocao(pet *Dados[MAX][ABRIGOS], int registros[ABRIGOS])
{
    int tipo, i, j;

     printf("Qual o tipo de animal que deseja adotar\n[0]Gato\n[1]Cachorro pequeno\n[2]Cachorro médio\n[3]Cachorro grande\n");
     scanf("%d", &tipo);
     printf("Pets Disponíveis para adoção:\n");

     for(i = 0; i < ABRIGOS; i++){
        for(j = 0; j < registros[i]; j++){

            if(Dados[j][i]->tipo == tipo){
                if(strcmp(Dados[j][i]->tutor, "Sem tutor") == 0){

                    printf("Pet de Cod: %d\n", Dados[j][i]->cod);
                }
            }
        }
     }

}
int Adotar(pet *Dados[MAX][ABRIGOS], int registros[ABRIGOS])
{
    int code, i, j, altera, encontrado = 0;;
    char nome[100];

    printf("Digite  o cod. do pet\n");
    scanf("%d", &code);

    for(i = 0; i < ABRIGOS; i++){
        for(j = 0; j < registros[i]; j++){
            if(Dados[j][i]->cod == code){
                encontrado = 1;
                 
                if(strcmp(Dados[j][i]->tutor, "Sem tutor") == 0){
                    printf("Digite o nome do novo tutor\n");
                    scanf(" %[^\n]", nome);
                    strcpy(Dados[j][i]->tutor, nome);
                    return 0;
                }
                else{
                    printf("Pet já tem tutor, deseja alterá-lo?\n[1]Sim\n[0]Não\n");
                    scanf("%d", &altera);

                     if(altera == 1){
                         printf("Digite o nome do novo tutor\n");
                         scanf(" %[^\n]", nome);
                         strcpy(Dados[j][i]->tutor, nome);
                         return 0;
                     }
                     else{
                     return 0;
                     }
                }
            }
        }
    }
    if(encontrado == 0){
    printf("Pet com código %d não encontrado.\n", code);
    }
    return 0;
}

int Relatorio(pet *Dados[MAX][ABRIGOS], int registros[ABRIGOS])
{
    int abrigo, i, j;
    int gato = 0, cachorro = 0, filhote = 0, semtutor = 0;
    int soma = 0;
    
    printf("Digite o Cod. do abrigo( 0 á 2)\n");
    scanf("%d", &abrigo);
    
    if (abrigo < 0 || abrigo >= ABRIGOS) {
    printf("Código de abrigo inválido.\n");
    return 0;
    }

        for(j = 0; j < registros[abrigo]; j++){

         if(Dados[j][abrigo]->tipo == 0){
            gato++;
         }
         else{
            cachorro++;
         }
         if(Dados[j][abrigo]->idade == 0){
            filhote++;
         }
         if(strcmp(Dados[j][abrigo]->tutor, "Sem tutor") == 0){
            semtutor++;
         }
        }
         printf("==Relatório abrigo: %d==\n", abrigo);
         printf("Gatos = %d\n", gato);
         printf("Cachorros = %d\n", cachorro);
         printf("Filhotes = %d\n", filhote);
         
    
          soma = registros[abrigo];
          
          if (soma == 0) {
             printf("Nenhum animal registrado neste abrigo.\n");
          return 0;
          }
          float porcentagem = (semtutor * 100.0) / soma;
          printf("Sem tutor = %.2f porcento\n", porcentagem);
          
}


int main()
{
    pet *Dados[MAX][ABRIGOS] = {NULL};
	int registro_por_abrigo[ABRIGOS] ={0};
    int absolute_cod = 0;
    pet estrutura;
    int menu = 0;

    while(menu != 6){
     printf("==MENU==\n");
     printf("[1]Cadastrar pet\n[2]adoção\n[3]Adotar\n[4]Relatório\n[5]Mostrar\n[6]Sair\n");
     scanf("%d", &menu);

     switch(menu){

         case 1:
          Ler(&estrutura);
          Registrar(estrutura, Dados, registro_por_abrigo, &absolute_cod);
          Mostrar(Dados, registro_por_abrigo);
          
          printf("%d", registro_por_abrigo[0]);
           printf("%d", registro_por_abrigo[1]);
            printf("%d", registro_por_abrigo[3]);
         break;

         case 2:
           Adocao(Dados, registro_por_abrigo);

         break;

         case 3:
           Adotar(Dados, registro_por_abrigo);

         break;

         case 4:
           Relatorio(Dados, registro_por_abrigo);

         break;
         
         case 5:
           Mostrar(Dados, registro_por_abrigo);
     }
    }
    for (int i = 0; i < MAX; i++) {
     for (int j = 0; j < ABRIGOS; j++) {
        if (Dados[i][j] != NULL) {
            free(Dados[i][j]);
        }
     }
    }
    
 return 0;
}
